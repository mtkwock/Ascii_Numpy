bin_list = []

for i in range(256):
	num_1s = (i>> 7 & 1) + (i>>6 & 1) + (i>>5 & 1) + (i>>4 & 1) + (i>>3 & 1) + (i>>2 & 1) + (i>>1 & 1) + (i & 1)
	bin_list.append(num_1s)

#print bin_list


huge_list_doubled = [
[ 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0], #  (32) 
[ 0x0,  0x0,  0x0, 0x1c, 0x1c, 0x1c, 0x1c, 0x18, 0x18, 0x18,  0x0, 0x1c, 0x1c,  0x0,  0x0,  0x0], #! (33) 
[ 0x0,  0x0, 0x36, 0x36, 0x36, 0x36,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0], #" (34) 
[ 0x0,  0x0,  0x0, 0x1b, 0x37, 0xff, 0x36, 0x36, 0x76, 0xff, 0x6e, 0x6c, 0x6c,  0x0,  0x0,  0x0], ## (35) 
[ 0x0,  0x0, 0x18, 0x3e, 0x72, 0x60, 0x70, 0x7c, 0x1e,  0x7,  0x3, 0x67, 0x7e, 0x18, 0x18,  0x0], #$ (36) 
[ 0x0,  0x0,  0x0, 0x73, 0xf3, 0xde, 0xfc, 0x7c, 0x1f, 0x3d, 0x3d, 0x6d, 0xc7,  0x0,  0x0,  0x0], #% (37) 
[ 0x0,  0x0,  0x0, 0x3c, 0x7e, 0x6e, 0x6c, 0x38, 0x7b, 0xff, 0xce, 0xef, 0x7f,  0x0,  0x0,  0x0], #& (38) 
[ 0x0,  0x0, 0x1c, 0x1c, 0x18, 0x18,  0x8,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0], #' (39) 
[ 0x0,  0x6,  0xe, 0x1c, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x18, 0x1c,  0xe,  0x0], #( (40) 
[ 0x0,  0x0, 0x38, 0x18,  0xc,  0xe,  0x6,  0x6,  0x6,  0x6,  0x6,  0xe,  0xc, 0x1c, 0x38, 0x30], #) (41) 
[ 0x0,  0x0,  0x0, 0x1c, 0x18, 0x7f, 0x1c, 0x3e, 0x36,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0], #* (42) 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0x18, 0x18, 0x18, 0xff, 0x1c, 0x18, 0x18,  0x8,  0x0,  0x0,  0x0], #+ (43) 
[ 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0, 0x1c, 0x1c,  0xc, 0x1c, 0x38], #, (44) 
[ 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0, 0x3e,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0], #- (45) 
[ 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0, 0x18, 0x1c, 0x1c,  0x0,  0x0,  0x0], #. (46) 
[ 0x0,  0x0,  0x7,  0x6,  0x6,  0xe,  0xc,  0xc, 0x1c, 0x18, 0x18, 0x38, 0x30, 0x30, 0x70, 0x60], #/ (47) 
[ 0x0,  0x0,  0x0, 0x3e, 0x77, 0x63, 0xff, 0xff, 0xe3, 0xe3, 0x63, 0x77, 0x3e,  0x0,  0x0,  0x0], #0 (48) 
[ 0x0,  0x0,  0x0,  0xc, 0x3c, 0x7c,  0xc,  0xc,  0xc,  0xc,  0xc,  0xc, 0x7f,  0x0,  0x0,  0x0], #1 (49) 
[ 0x0,  0x0,  0x0, 0x3e, 0x7e,  0x7,  0x7,  0x6, 0x1c, 0x38, 0x30, 0x70, 0x7f,  0x0,  0x0,  0x0], #2 (50) 
[ 0x0,  0x0,  0x0, 0x7e, 0x6e,  0x7,  0x6, 0x1e,  0x7,  0x3,  0x3, 0x67, 0x7e,  0x0,  0x0,  0x0], #3 (51) 
[ 0x0,  0x0,  0x0,  0xe, 0x1e, 0x1e, 0x36, 0x66, 0x66, 0xff,  0x6,  0x6,  0x6,  0x0,  0x0,  0x0], #4 (52) 
[ 0x0,  0x0,  0x0, 0x3f, 0x30, 0x30, 0x30, 0x7e,  0x7,  0x3,  0x3, 0x67, 0x7e,  0x0,  0x0,  0x0], #5 (53) 
[ 0x0,  0x0,  0x0,  0xf, 0x3c, 0x70, 0x7e, 0x67, 0x63, 0x63, 0x63, 0x77, 0x3e,  0x0,  0x0,  0x0], #6 (54) 
[ 0x0,  0x0,  0x0, 0x7f,  0x7,  0x6,  0xe,  0xc, 0x1c, 0x18, 0x18, 0x38, 0x38,  0x0,  0x0,  0x0], #7 (55) 
[ 0x0,  0x0,  0x0, 0x3e, 0x77, 0x63, 0x67, 0x3e, 0x7e, 0x63, 0xe3, 0x77, 0x3e,  0x0,  0x0,  0x0], #8 (56) 
[ 0x0,  0x0,  0x0, 0x3e, 0x77, 0x63, 0xe3, 0x63, 0x7f,  0x7,  0x6, 0x1e, 0x78,  0x0,  0x0,  0x0], #9 (57) 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0x1c, 0x1c, 0x18,  0x0,  0x0, 0x18, 0x1c, 0x1c,  0x0,  0x0,  0x0], #: (58) 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0x1c, 0x1c, 0x18,  0x0,  0x0,  0x0, 0x1c, 0x1c, 0x1c, 0x38,  0x0], #; (59) 
[ 0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0xf, 0x3c, 0xf0, 0x78, 0x1f,  0x3,  0x0,  0x0,  0x0,  0x0], #< (60) 
[ 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0, 0xff,  0x0,  0x0, 0xff,  0x0,  0x0,  0x0,  0x0,  0x0], #= (61) 
[ 0x0,  0x0,  0x0,  0x0,  0x0,  0x0, 0x78, 0x1e,  0x7,  0xf, 0x7c, 0x60,  0x0,  0x0,  0x0,  0x0], #> (62) 
[ 0x0,  0x0,  0x0, 0x7e, 0x26,  0x7,  0x6,  0xc, 0x18, 0x10,  0x0, 0x38, 0x18,  0x0,  0x0,  0x0], #? (63) 
[ 0x0,  0x0,  0x0, 0x1e, 0x33, 0x63, 0x6f, 0xff, 0xfb, 0xfb, 0xfb, 0xff, 0x6f, 0x70, 0x38, 0x1f], #@ (64) 
[ 0x0,  0x0,  0x0, 0x1c, 0x3c, 0x3e, 0x36, 0x76, 0x67, 0x7f, 0xe3, 0xc3, 0xc3,  0x0,  0x0,  0x0], #A (65) 
[ 0x0,  0x0,  0x0, 0x7e, 0x67, 0x67, 0x66, 0x7e, 0x67, 0x63, 0x63, 0x67, 0x7e,  0x0,  0x0,  0x0], #B (66) 
[ 0x0,  0x0,  0x0, 0x1f, 0x7b, 0x60, 0x60, 0xe0, 0xe0, 0x60, 0x60, 0x7b, 0x1f,  0x0,  0x0,  0x0], #C (67) 
[ 0x0,  0x0,  0x0, 0x7c, 0x6e, 0x67, 0x63, 0x63, 0x63, 0x63, 0x67, 0x6e, 0x7c,  0x0,  0x0,  0x0], #D (68) 
[ 0x0,  0x0,  0x0, 0x7f, 0x70, 0x60, 0x60, 0x7e, 0x70, 0x60, 0x60, 0x70, 0x7f,  0x0,  0x0,  0x0], #E (69) 
[ 0x0,  0x0,  0x0, 0x7f, 0x70, 0x60, 0x60, 0x7f, 0x70, 0x60, 0x60, 0x60, 0x60,  0x0,  0x0,  0x0], #F (70) 
[ 0x0,  0x0,  0x0, 0x1f, 0x7b, 0x60, 0x60, 0xe0, 0xe3, 0x63, 0x63, 0x7b, 0x1f,  0x0,  0x0,  0x0], #G (71) 
[ 0x0,  0x0,  0x0, 0xe3, 0xe3, 0xe3, 0xe3, 0xff, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3,  0x0,  0x0,  0x0], #H (72) 
[ 0x0,  0x0,  0x0, 0x7f, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1c, 0x7f,  0x0,  0x0,  0x0], #I (73) 
[ 0x0,  0x0,  0x0, 0x3f,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7, 0x6e, 0x7c,  0x0,  0x0,  0x0], #J (74) 
[ 0x0,  0x0,  0x0, 0x63, 0x66, 0x6e, 0x7c, 0x78, 0x7c, 0x6e, 0x66, 0x67, 0x63,  0x0,  0x0,  0x0], #K (75) 
[ 0x0,  0x0,  0x0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x70, 0x7f,  0x0,  0x0,  0x0], #L (76) 
[ 0x0,  0x0,  0x0, 0x67, 0x77, 0x77, 0x7f, 0xff, 0xdf, 0xc3, 0xc3, 0xc3, 0xc3,  0x0,  0x0,  0x0], #M (77) 
[ 0x0,  0x0,  0x0, 0x63, 0x73, 0x73, 0x7b, 0x7b, 0x6f, 0x6f, 0x67, 0x67, 0x63,  0x0,  0x0,  0x0], #N (78) 
[ 0x0,  0x0,  0x0, 0x3e, 0x77, 0xe3, 0xe3, 0xc3, 0xc3, 0xe3, 0xe3, 0x77, 0x3e,  0x0,  0x0,  0x0], #O (79) 
[ 0x0,  0x0,  0x0, 0x7e, 0x67, 0x63, 0x63, 0x67, 0x7e, 0x60, 0x60, 0x60, 0x60,  0x0,  0x0,  0x0], #P (80) 
[ 0x0,  0x0,  0x0, 0x3e, 0x77, 0x63, 0xe3, 0xc3, 0xc3, 0xc3, 0xe3, 0x63, 0x7f, 0x3e, 0x1c,  0xf], #Q (81) 
[ 0x0,  0x0,  0x0, 0x7e, 0x6f, 0x67, 0x63, 0x67, 0x7e, 0x6c, 0x66, 0x67, 0x63,  0x0,  0x0,  0x0], #R (82) 
[ 0x0,  0x0,  0x0, 0x3e, 0x72, 0x60, 0x70, 0x3c,  0xe,  0x3,  0x3, 0x67, 0x7e,  0x0,  0x0,  0x0], #S (83) 
[ 0x0,  0x0,  0x0, 0xff, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,  0x0,  0x0,  0x0], #T (84) 
[ 0x0,  0x0,  0x0, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0x63, 0x77, 0x3e,  0x0,  0x0,  0x0], #U (85) 
[ 0x0,  0x0,  0x0, 0xc3, 0xe3, 0xe3, 0x63, 0x67, 0x76, 0x36, 0x3e, 0x3c, 0x1c,  0x0,  0x0,  0x0], #V (86) 
[ 0x0,  0x0,  0x0, 0xc3, 0xc3, 0xc3, 0xc3, 0xdf, 0xff, 0x7f, 0x77, 0x77, 0x67,  0x0,  0x0,  0x0], #W (87) 
[ 0x0,  0x0,  0x0, 0xe3, 0x67, 0x36, 0x3c, 0x1c, 0x3c, 0x3e, 0x76, 0x63, 0xe3,  0x0,  0x0,  0x0], #X (88) 
[ 0x0,  0x0,  0x0, 0xc3, 0xe3, 0x67, 0x76, 0x3e, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c,  0x0,  0x0,  0x0], #Y (89) 
[ 0x0,  0x0,  0x0, 0x7f,  0x7,  0x6,  0xc, 0x1c, 0x18, 0x30, 0x70, 0x60, 0x7f,  0x0,  0x0,  0x0], #Z (90) 
[ 0x0,  0x0, 0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e], #[ (91) 
[ 0x0,  0x0, 0x60, 0x70, 0x30, 0x30, 0x38, 0x18, 0x18, 0x1c,  0xc,  0xc,  0xe,  0x6,  0x6,  0x7], #\ (92) 
[ 0x0,  0x0, 0x3e,  0xe,  0xe,  0xe,  0xe,  0xe,  0xe,  0xe,  0xe,  0xe,  0xe,  0xe,  0xe, 0x3e], #] (93) 
[ 0x0,  0x0,  0x0, 0x1c, 0x3c, 0x3e, 0x76, 0x63, 0x43,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0], #^ (94) 
[ 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0, 0xff], #_ (95) 
[ 0x0,  0x0, 0x18,  0xc,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0], #` (96) 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0x3e,  0x7,  0x3, 0x3f, 0x77, 0x63, 0x77, 0x3f,  0x0,  0x0,  0x0], #a (97) 
[ 0x0, 0x60, 0x60, 0x60, 0x60, 0x7e, 0x77, 0x63, 0x63, 0x63, 0x63, 0x67, 0x7e,  0x0,  0x0,  0x0], #b (98) 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0x3f, 0x78, 0x60, 0xe0, 0xe0, 0x60, 0x79, 0x3f,  0x0,  0x0,  0x0], #c (99) 
[ 0x0,  0x3,  0x3,  0x3,  0x3, 0x3f, 0x77, 0xe3, 0xe3, 0xe3, 0x63, 0x77, 0x3f,  0x0,  0x0,  0x0], #d (100) 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0x3e, 0x77, 0x63, 0xff, 0xe0, 0x60, 0x72, 0x3f,  0x0,  0x0,  0x0], #e (101) 
[ 0x0,  0x0, 0x1f, 0x18, 0x38, 0x7f, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38,  0x0,  0x0,  0x0], #f (102) 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0x3f, 0x77, 0x63, 0xe3, 0xe3, 0xe3, 0x77, 0x3f,  0x7, 0x66, 0x7e], #g (103) 
[ 0x0, 0x60, 0x60, 0x60, 0x60, 0x7e, 0x77, 0x67, 0x63, 0x63, 0x63, 0x63, 0x63,  0x0,  0x0,  0x0], #h (104) 
[ 0x0,  0x0, 0x38, 0x38,  0x0, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1d,  0xf,  0x0,  0x0,  0x0], #i (105) 
[ 0x0,  0x0,  0xe,  0xe,  0x0, 0x3e,  0x6,  0x6,  0x6,  0x6,  0x6,  0x6,  0x6,  0x6, 0x6e, 0x7c], #j (106) 
[ 0x0, 0x60, 0x60, 0x60, 0x60, 0x67, 0x6e, 0x7c, 0x78, 0x7c, 0x6e, 0x67, 0x63,  0x0,  0x0,  0x0], #k (107) 
[ 0x0,  0x0, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1d,  0xf,  0x0,  0x0,  0x0], #l (108) 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0xff, 0xff, 0xdb, 0xdb, 0xdb, 0xc3, 0xc3, 0xc3,  0x0,  0x0,  0x0], #m (109) 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0x7e, 0x77, 0x67, 0x63, 0x63, 0x63, 0x63, 0x63,  0x0,  0x0,  0x0], #n (110) 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0x3e, 0x77, 0x63, 0xe3, 0xe3, 0x63, 0x77, 0x3e,  0x0,  0x0,  0x0], #o (111) 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0x7e, 0x67, 0x63, 0x63, 0x63, 0x63, 0x77, 0x7e, 0x60, 0x60, 0x60], #p (112) 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0x3f, 0x77, 0x63, 0xe3, 0xe3, 0xe3, 0x77, 0x3f,  0x3,  0x3,  0x3], 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0x3f, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,  0x0,  0x0,  0x0], 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0x3e, 0x72, 0x60, 0x3c, 0x1e,  0x7, 0x67, 0x7e,  0x0,  0x0,  0x0], 
[ 0x0,  0x0,  0x0, 0x38, 0x38, 0x7f, 0x38, 0x38, 0x38, 0x38, 0x38, 0x1d, 0x1f,  0x0,  0x0,  0x0], 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x77, 0x3f,  0x0,  0x0,  0x0], 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0xe3, 0x63, 0x67, 0x76, 0x36, 0x3e, 0x3c, 0x1c,  0x0,  0x0,  0x0], 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0xc1, 0xc3, 0xdf, 0xff, 0xff, 0x77, 0x77, 0x67,  0x0,  0x0,  0x0], 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0x63, 0x76, 0x3e, 0x1c, 0x1c, 0x36, 0x67, 0xe3,  0x0,  0x0,  0x0], 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0x63, 0x63, 0x77, 0x36, 0x36, 0x3e, 0x1c, 0x1c, 0x1c, 0x38, 0xf0], 
[ 0x0,  0x0,  0x0,  0x0,  0x0, 0x7f,  0x6,  0xe, 0x1c, 0x38, 0x30, 0x70, 0x7f,  0x0,  0x0,  0x0], 
[ 0x0,  0x0,  0xf, 0x18, 0x18, 0x18, 0x18, 0x18, 0x70, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18,  0xf], 
[ 0x0,  0x0, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18], 
[ 0x0,  0x0, 0x78, 0x1c,  0xc,  0xc,  0xc,  0xc,  0xf,  0xc,  0xc,  0xc,  0xc,  0xc, 0x1c, 0x78], 
[ 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0, 0x7b, 0xde,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]]

str_out = "{{"

value = 32
'''
for i in range(len(huge_list_doubled)):
	for j in range(len(huge_list_doubled[0])):
		if(huge_list_doubled[i][j] / 2 >= 256):
			print("ERROR", huge_list_doubled[i][j])
		val = str(hex(huge_list_doubled[i][j] / 2))
		spaces = " " * (4 - len(val))
		str_out = str_out + spaces + val
		if(j +1 < len(huge_list_doubled[i])):
			str_out = str_out  + ", "
	if(i + 1 < len(huge_list_doubled)):
		str_out = str_out + "}, //" + chr(value)+ " ("+ str(value) +") \n{"
	value = value + 1
str_out = str_out + "}}; //" + chr(value-1) + " (" + str(value-1) + ")"
print str_out
'''

def gen_bright():
	printed = "const unsigned char chBright[95] = {0"
	for i in range(1, 95):
		counter = 0
		bytes = huge_list_doubled[i]
		for byte in bytes:
			for j in range(8):
				if(byte & 2**(7-j)):
					counter = counter + 1
#		printed = printed + chr(32 + i) + "," + str(counter)
		printed = printed + "," + str(counter)
	printed = printed + "};"
	print printed

def draw_character(ordinal):
	if(ordinal < 32 or ordinal >= 127):
		return
	bytes = huge_list_doubled[ordinal - 32]
	for byte in bytes:
#		byte = byte >>1
		printed = ""
		for i in range(8):
			if(byte & 2**(7 - i)):
				printed = printed + "##"
			else:
				printed = printed + "  "
		print printed

gen_bright()

while(True):
	inputed = raw_input("What character? ")
	try:
		value = int(inputed) + 32
	except ValueError:
		if(len(inputed) >0):
			value = ord(inputed[0])
			print(inputed[0], ord(inputed[0]))
		else:
			value = 32
	draw_character(value)